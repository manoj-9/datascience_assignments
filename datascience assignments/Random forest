{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNwBd/hhDXcRvaqg89tekDg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('/content/Fraud_check.csv')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"X6leABowvxQP","executionInfo":{"status":"ok","timestamp":1690915552427,"user_tz":-330,"elapsed":387,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"25ea852e-2982-4b0f-cda3-1a24a7910c91"},"execution_count":105,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Undergrad Marital.Status  Taxable.Income  City.Population  \\\n","0          NO         Single           68833            50047   \n","1         YES       Divorced           33700           134075   \n","2          NO        Married           36925           160205   \n","3         YES         Single           50190           193264   \n","4          NO        Married           81002            27533   \n","..        ...            ...             ...              ...   \n","595       YES       Divorced           76340            39492   \n","596       YES       Divorced           69967            55369   \n","597        NO       Divorced           47334           154058   \n","598       YES        Married           98592           180083   \n","599        NO       Divorced           96519           158137   \n","\n","     Work.Experience Urban  \n","0                 10   YES  \n","1                 18   YES  \n","2                 30   YES  \n","3                 15   YES  \n","4                 28    NO  \n","..               ...   ...  \n","595                7   YES  \n","596                2   YES  \n","597                0   YES  \n","598               17    NO  \n","599               16    NO  \n","\n","[600 rows x 6 columns]"],"text/html":["\n","\n","  <div id=\"df-3f7745f0-4ca1-4a00-9499-5f8d32f1db6e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Undergrad</th>\n","      <th>Marital.Status</th>\n","      <th>Taxable.Income</th>\n","      <th>City.Population</th>\n","      <th>Work.Experience</th>\n","      <th>Urban</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NO</td>\n","      <td>Single</td>\n","      <td>68833</td>\n","      <td>50047</td>\n","      <td>10</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>YES</td>\n","      <td>Divorced</td>\n","      <td>33700</td>\n","      <td>134075</td>\n","      <td>18</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NO</td>\n","      <td>Married</td>\n","      <td>36925</td>\n","      <td>160205</td>\n","      <td>30</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>YES</td>\n","      <td>Single</td>\n","      <td>50190</td>\n","      <td>193264</td>\n","      <td>15</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NO</td>\n","      <td>Married</td>\n","      <td>81002</td>\n","      <td>27533</td>\n","      <td>28</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>595</th>\n","      <td>YES</td>\n","      <td>Divorced</td>\n","      <td>76340</td>\n","      <td>39492</td>\n","      <td>7</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>596</th>\n","      <td>YES</td>\n","      <td>Divorced</td>\n","      <td>69967</td>\n","      <td>55369</td>\n","      <td>2</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>597</th>\n","      <td>NO</td>\n","      <td>Divorced</td>\n","      <td>47334</td>\n","      <td>154058</td>\n","      <td>0</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>598</th>\n","      <td>YES</td>\n","      <td>Married</td>\n","      <td>98592</td>\n","      <td>180083</td>\n","      <td>17</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>599</th>\n","      <td>NO</td>\n","      <td>Divorced</td>\n","      <td>96519</td>\n","      <td>158137</td>\n","      <td>16</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>600 rows Ã— 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f7745f0-4ca1-4a00-9499-5f8d32f1db6e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-352c4174-f1ff-45e1-8e23-b9023feac05a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-352c4174-f1ff-45e1-8e23-b9023feac05a')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-352c4174-f1ff-45e1-8e23-b9023feac05a button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3f7745f0-4ca1-4a00-9499-5f8d32f1db6e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3f7745f0-4ca1-4a00-9499-5f8d32f1db6e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gjbLcP8Jv2l7","executionInfo":{"status":"ok","timestamp":1690915552867,"user_tz":-330,"elapsed":5,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"cbc0d265-ce2b-43f9-c4de-bee7707e8cbf"},"execution_count":106,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Undergrad          0\n","Marital.Status     0\n","Taxable.Income     0\n","City.Population    0\n","Work.Experience    0\n","Urban              0\n","dtype: int64"]},"metadata":{},"execution_count":106}]},{"cell_type":"code","source":["cond = df['Taxable.Income'] <=30000\n","cond1 = df['Taxable.Income'] > 30000\n","df.loc[cond,'Taxable.Income'] = 0\n","df.loc[cond1,'Taxable.Income'] = 1"],"metadata":{"id":"NhAMU-bGwDTW","executionInfo":{"status":"ok","timestamp":1690915552867,"user_tz":-330,"elapsed":4,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}}},"execution_count":107,"outputs":[]},{"cell_type":"code","source":["df['Taxable.Income'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B7QaICkEwFqk","executionInfo":{"status":"ok","timestamp":1690915552867,"user_tz":-330,"elapsed":4,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"e059fbfa-e6b8-4a9d-ce4d-1eb8275d58a1"},"execution_count":108,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    476\n","0    124\n","Name: Taxable.Income, dtype: int64"]},"metadata":{},"execution_count":108}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"vZHWaZ0nwH_S","executionInfo":{"status":"ok","timestamp":1690915553664,"user_tz":-330,"elapsed":799,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"39566d68-cd03-49d8-e048-1c64bcbe2e51"},"execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Undergrad Marital.Status  Taxable.Income  City.Population  \\\n","0          NO         Single               1            50047   \n","1         YES       Divorced               1           134075   \n","2          NO        Married               1           160205   \n","3         YES         Single               1           193264   \n","4          NO        Married               1            27533   \n","..        ...            ...             ...              ...   \n","595       YES       Divorced               1            39492   \n","596       YES       Divorced               1            55369   \n","597        NO       Divorced               1           154058   \n","598       YES        Married               1           180083   \n","599        NO       Divorced               1           158137   \n","\n","     Work.Experience Urban  \n","0                 10   YES  \n","1                 18   YES  \n","2                 30   YES  \n","3                 15   YES  \n","4                 28    NO  \n","..               ...   ...  \n","595                7   YES  \n","596                2   YES  \n","597                0   YES  \n","598               17    NO  \n","599               16    NO  \n","\n","[600 rows x 6 columns]"],"text/html":["\n","\n","  <div id=\"df-cc735f67-c0d9-4fe2-95e0-ab1bb0435184\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Undergrad</th>\n","      <th>Marital.Status</th>\n","      <th>Taxable.Income</th>\n","      <th>City.Population</th>\n","      <th>Work.Experience</th>\n","      <th>Urban</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NO</td>\n","      <td>Single</td>\n","      <td>1</td>\n","      <td>50047</td>\n","      <td>10</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>YES</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>134075</td>\n","      <td>18</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NO</td>\n","      <td>Married</td>\n","      <td>1</td>\n","      <td>160205</td>\n","      <td>30</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>YES</td>\n","      <td>Single</td>\n","      <td>1</td>\n","      <td>193264</td>\n","      <td>15</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NO</td>\n","      <td>Married</td>\n","      <td>1</td>\n","      <td>27533</td>\n","      <td>28</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>595</th>\n","      <td>YES</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>39492</td>\n","      <td>7</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>596</th>\n","      <td>YES</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>55369</td>\n","      <td>2</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>597</th>\n","      <td>NO</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>154058</td>\n","      <td>0</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>598</th>\n","      <td>YES</td>\n","      <td>Married</td>\n","      <td>1</td>\n","      <td>180083</td>\n","      <td>17</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>599</th>\n","      <td>NO</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>158137</td>\n","      <td>16</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>600 rows Ã— 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc735f67-c0d9-4fe2-95e0-ab1bb0435184')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-40e8a49f-8d79-4dc0-9d37-ee6dee13fc00\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40e8a49f-8d79-4dc0-9d37-ee6dee13fc00')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-40e8a49f-8d79-4dc0-9d37-ee6dee13fc00 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cc735f67-c0d9-4fe2-95e0-ab1bb0435184 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cc735f67-c0d9-4fe2-95e0-ab1bb0435184');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","le = LabelEncoder()\n","cols = ['Undergrad', 'Marital.Status', 'Urban']\n","for i in cols:\n","    df[i] = le.fit_transform(df[i])"],"metadata":{"id":"SmF5_hzRwLK8","executionInfo":{"status":"ok","timestamp":1690915553665,"user_tz":-330,"elapsed":13,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":["df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vqd6ZT-8wPq-","executionInfo":{"status":"ok","timestamp":1690915553665,"user_tz":-330,"elapsed":12,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"8775146c-16be-4174-e63a-a3776e3f72f7"},"execution_count":111,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Undergrad          int64\n","Marital.Status     int64\n","Taxable.Income     int64\n","City.Population    int64\n","Work.Experience    int64\n","Urban              int64\n","dtype: object"]},"metadata":{},"execution_count":111}]},{"cell_type":"code","source":["# checking for outliers\n","import seaborn as sns\n","sns.boxplot(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"hjz-fMDRwS0l","executionInfo":{"status":"ok","timestamp":1690915553665,"user_tz":-330,"elapsed":10,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"0c0f3f2b-06f9-47b7-dcc3-0dd80b5f8cee"},"execution_count":112,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":112},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["x = df.drop('Taxable.Income',axis=1)\n","y = df['Taxable.Income']"],"metadata":{"id":"EMCYQ5jrwWkq","executionInfo":{"status":"ok","timestamp":1690915553665,"user_tz":-330,"elapsed":7,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}}},"execution_count":113,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","sc.fit(x)\n","x = sc.transform(x)"],"metadata":{"id":"sdqmxEOUwZly","executionInfo":{"status":"ok","timestamp":1690915553666,"user_tz":-330,"elapsed":8,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}}},"execution_count":114,"outputs":[]},{"cell_type":"code","source":["# splitting the data\n","from sklearn.model_selection import train_test_split\n","x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=10)\n","print(x_train.shape)\n","print(x_test.shape)\n","print()\n","print(y_train.shape)\n","print(y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wCFDbexuwcIb","executionInfo":{"status":"ok","timestamp":1690915554279,"user_tz":-330,"elapsed":621,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"58afc03c-18f7-49b5-a358-8f18a2b24a47"},"execution_count":115,"outputs":[{"output_type":"stream","name":"stdout","text":["(480, 5)\n","(120, 5)\n","\n","(480,)\n","(120,)\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","RF = RandomForestClassifier(n_estimators=34,criterion='entropy',max_depth=5)\n","RF.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"vOGYzE0rwhRn","executionInfo":{"status":"ok","timestamp":1690915554279,"user_tz":-330,"elapsed":14,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"f3f8b606-c73c-4d25-a58d-13b46b88e8a8"},"execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=34)"],"text/html":["<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=5, n_estimators=34)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=5, n_estimators=34)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["y_pred = RF.predict(x_test)\n","print(list(zip(y_test,y_pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uEjhE1WIwlFo","executionInfo":{"status":"ok","timestamp":1690915554280,"user_tz":-330,"elapsed":14,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"7b34a517-c9dd-41b3-d048-2344462ee938"},"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (0, 1), (1, 1), (1, 1), (0, 1), (1, 1), (0, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (0, 1), (0, 1), (1, 1), (1, 1), (0, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 1), (1, 1), (0, 1), (1, 1), (1, 1), (0, 1), (0, 1), (1, 1), (0, 1)]\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","cm = confusion_matrix(y_test,y_pred)\n","cr = classification_report(y_test,y_pred)\n","acc = accuracy_score(y_test,y_pred)\n","print('confusion matrix: \\n',cm)\n","print('\\nclassification report:\\n',cr)\n","print('\\naccuracy score: ',acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gQMP6VrqwpAa","executionInfo":{"status":"ok","timestamp":1690915554280,"user_tz":-330,"elapsed":12,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"7fdbea39-3fb8-48cc-9fba-25366aebc281"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stdout","text":["confusion matrix: \n"," [[ 0 26]\n"," [ 0 94]]\n","\n","classification report:\n","               precision    recall  f1-score   support\n","\n","           0       0.00      0.00      0.00        26\n","           1       0.78      1.00      0.88        94\n","\n","    accuracy                           0.78       120\n","   macro avg       0.39      0.50      0.44       120\n","weighted avg       0.61      0.78      0.69       120\n","\n","\n","accuracy score:  0.7833333333333333\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import BaggingClassifier\n","# Instantiate dt\n","dt = DecisionTreeClassifier(min_samples_leaf=8, random_state=1)\n","# Instantiate bc\n","bc = BaggingClassifier(base_estimator=dt, n_estimators=50, oob_score=True, random_state=1)"],"metadata":{"id":"N0EsaaiyPg-m","executionInfo":{"status":"ok","timestamp":1690915554280,"user_tz":-330,"elapsed":10,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}}},"execution_count":119,"outputs":[]},{"cell_type":"code","source":["# Fit bc to the training set\n","bc.fit(x_train, y_train)\n","# Predict test set labels\n","y_pred = bc.predict(x_test)\n","# Evaluate test set accuracy\n","acc_test = accuracy_score(y_test, y_pred)\n","# Evaluate OOB accuracy\n","acc_oob = bc.oob_score_\n","# Print acc_test and acc_oob\n","print('Test set accuracy: {:.3f}, OOB accuracy: {:.3f}'.format(acc_test, acc_oob))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zc7clLg9SSH5","executionInfo":{"status":"ok","timestamp":1690915554280,"user_tz":-330,"elapsed":10,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"db753c1c-b958-478e-8feb-513bbd5ccaf6"},"execution_count":120,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set accuracy: 0.783, OOB accuracy: 0.794\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.30, random_state=10)"],"metadata":{"id":"vIR6tZIQWpkP","executionInfo":{"status":"ok","timestamp":1690915554281,"user_tz":-330,"elapsed":9,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}}},"execution_count":121,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor(n_estimators=1000, random_state=42)\n","rf.fit(x_train, y_train)\n","rf = RandomForestClassifier(n_estimators = 10000, max_depth=7)\n","rf = rf.fit(x_train, y_train)\n","print(\"Train Score: \", rf.score(x_train, y_train))\n","print(\"Test Score:\", rf.score(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MNOzb1QWSbvG","executionInfo":{"status":"ok","timestamp":1690915574602,"user_tz":-330,"elapsed":20329,"user":{"displayName":"Manne bhaskar","userId":"12366873904210832229"}},"outputId":"bea8637b-bd75-4473-e661-7f6f8f9ad679"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Score:  0.8357142857142857\n","Test Score: 0.7722222222222223\n"]}]}]}